services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-helloworld_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # Django Backend API
  backend:
    image: ${DOCKERHUB_USERNAME:-aayush786}/django-helloworld-backend:${BACKEND_IMAGE_TAG:-latest}
    environment:
      - SECRET_KEY=${SECRET_KEY:-your-django-secret-key-change-this}
      - DEBUG=${DEBUG:-False}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=${DB_NAME:-helloworld_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_HOST=db
      - DB_PORT=5432
      - LANGUAGE_CODE=${LANGUAGE_CODE:-en-us}
      - TIME_ZONE=${TIME_ZONE:-UTC}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/hello/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Next.js Frontend
  frontend:
    image: ${DOCKERHUB_USERNAME:-aayush786}/django-helloworld-frontend:${FRONTEND_IMAGE_TAG:-latest}
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge 